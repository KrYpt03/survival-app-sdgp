name: Backend CI/CD

on:
  push:
    branches: [ development ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ development ]
    paths:
      - 'backend/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install ESLint
      working-directory: ./backend
      run: npm install eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-import --save-dev
      
    - name: Run ESLint
      working-directory: ./backend
      run: npx eslint . --ext .ts --config eslint.config.mjs
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: postgres
          POSTGRES_DB: survival_app_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Create .env file
      working-directory: ./backend
      run: |
        echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/survival_app_test" > .env
        echo "CLERK_WEBHOOK_SECRET=test_webhook_secret" >> .env
        echo "PORT=5000" >> .env
        echo "NODE_ENV=test" >> .env
        echo "DEFAULT_GEOFENCE_RANGE=100" >> .env
        echo "ALLOWED_ORIGINS=http://localhost:3000" >> .env
        echo "RATE_LIMIT_WINDOW_MS=60000" >> .env
        echo "RATE_LIMIT_MAX_REQUESTS=100" >> .env
        echo "CACHE_TTL=300" >> .env
    
    - name: Run Prisma migrations
      working-directory: ./backend
      run: npx prisma migrate deploy
    
    - name: Run tests with coverage
      working-directory: ./backend
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        directory: ./backend/coverage
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run npm audit
      working-directory: ./backend
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      with:
        args: --file=backend/package.json
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/development'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Build TypeScript
      working-directory: ./backend
      run: |
        npx tsc
    
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/

# Enable this job when ready for deployment
#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    needs: build
#    if: github.ref == 'refs/heads/development'
#    
#    steps:
#    - name: Download build artifact
#      uses: actions/download-artifact@v4
#      with:
#        name: backend-build
#        path: backend/dist
#
#    - name: Deploy to staging
#      run: echo "Deploy to staging environment"

# Additional configurations below for reference:
# 
# For production deployment, consider using a cloud database:
# - Supabase (PostgreSQL): https://supabase.com/
# - Neon (Serverless Postgres): https://neon.tech/
# - MongoDB Atlas: https://www.mongodb.com/atlas/database
#
# Example Supabase connection URL:
# DATABASE_URL=postgres://postgres:[PASSWORD]@db.[PROJECT-REF].supabase.co:5432/postgres 